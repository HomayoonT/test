name: YT VNC Persistent Extended

on:
  workflow_dispatch:

jobs:
  yt_vnc_persistent:
    runs-on: ubuntu-latest

    env:
      VIDEO_URL_FILE: ${{ secrets.VIDEO_URL_FILE }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GOOGLE_ACCOUNT: ${{ secrets.GOOGLE_ACCOUNT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y xvfb x11vnc wget curl jq unzip python3-pip xfce4 xfce4-goodies
          pip3 install seleniumbase

      - name: Fetch Dropbox access token using refresh token
        id: get_dropbox_token
        env:
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          DROPBOX_CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          DROPBOX_CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
        run: |
          response=$(curl -s -X POST https://api.dropbox.com/oauth2/token \
            -d grant_type=refresh_token \
            -d refresh_token=$DROPBOX_REFRESH_TOKEN \
            -d client_id=$DROPBOX_CLIENT_ID \
            -d client_secret=$DROPBOX_CLIENT_SECRET)

          access_token=$(echo $response | jq -r .access_token)

          if [ "$access_token" == "null" ] || [ -z "$access_token" ]; then
            echo "Failed to get access token"
            echo "$response"
            exit 1
          fi

          echo "DROPBOX_ACCESS_TOKEN=$access_token" >> $GITHUB_ENV

      - name: Download chrome_profile archive from Dropbox
        env:
          GOOGLE_ACCOUNT: ${{ secrets.GOOGLE_ACCOUNT }}
        run: |
          curl -X POST https://content.dropboxapi.com/2/files/download \
            --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
            --header "Dropbox-API-Arg: {\"path\": \"/chrome_profile_${GOOGLE_ACCOUNT}.tar.gz\"}" \
            --output chrome_profile_${GOOGLE_ACCOUNT}.tar.gz

      - name: Extract chrome_profile archive
        env:
          GOOGLE_ACCOUNT: ${{ secrets.GOOGLE_ACCOUNT }}
        run: |
          tar -xzf chrome_profile_${GOOGLE_ACCOUNT}.tar.gz

      - name: List contents
        run: |
          echo "Contents of chrome_profile:"
          ls -la chrome_profile

      - name: Set up Xvfb, Xfce, VNC, and Selenium
        run: |
          Xvfb :1 -screen 0 1024x768x16 &
          export DISPLAY=:1
          echo "export DISPLAY=:1" >> $GITHUB_ENV
          sleep 2
          startxfce4 &
          sleep 5
          x11vnc -storepasswd secret /tmp/passwd
          x11vnc -forever -rfbauth /tmp/passwd -display :1 -shared -bg
          sleep 1

      - name: Install latest ngrok (v3)
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok

      - name: Authenticate and start ngrok
        run: |
          ngrok config add-authtoken 1QzNVolV9VvSiUE7AlMnKlFkg1J_3VBimpCJrC4JHXLNwVvwd
          ngrok tcp 5900 --log=stdout > ngrok.log &
          sleep 3

      - name: Get ngrok public URL
        run: |
          echo "‚è≥ Waiting for ngrok tunnel..."
          for i in {1..15}; do
            NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url // empty')
            if [[ -n "$NGROK_URL" ]]; then
              echo "üîó VNC Public URL: $NGROK_URL"
              break
            else
              echo "‚åõ Still waiting..."
              sleep 2
            fi
          done
          if [[ -z "$NGROK_URL" ]]; then
            echo "‚ùå ngrok tunnel failed. ngrok logs:"
            cat ngrok.log
          fi

      - name: Confirm DISPLAY env
        run: echo $DISPLAY

      - name: Run YT script
        run: |
          echo "üñ•Ô∏è Running YT script..."
          DISPLAY=:1 python3 ./yt.py

      # - name: Keep job alive for 8 minutes
      #   run: |
      #     echo "Sleep for 8 minutes"
      #     sleep 480

      - name: Archive chrome_profile directory (tar)
        run: |
          tar -czf chrome_profile_${GOOGLE_ACCOUNT}.tar.gz chrome_profile

      - name: Upload chrome_profile archive to Dropbox
        env:
          GOOGLE_ACCOUNT: ${{ secrets.GOOGLE_ACCOUNT }}
        run: |
          curl -X POST https://content.dropboxapi.com/2/files/upload \
            --header "Authorization: Bearer $DROPBOX_ACCESS_TOKEN" \
            --header "Dropbox-API-Arg: {\"path\": \"/chrome_profile_${GOOGLE_ACCOUNT}.tar.gz\",\"mode\": \"overwrite\"}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @chrome_profile_${GOOGLE_ACCOUNT}.tar.gz

      - name: Trigger next workflow run (recursive call)
        run: |
          echo "Triggering the next run via GitHub API..."
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               https://api.github.com/repos/${{ github.repository }}/actions/workflows/yt_vnc_persistent_extended.yml/dispatches \
               -d '{"ref":"${{ github.ref_name }}"}'
